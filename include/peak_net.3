.\"
.\" Copyright (c) 2012-2014 Franco Fichtner <franco@packetwerk.com>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd February 24, 2014
.Dt PEAK_NET 3
.Os
.Sh NAME
.Nm NET_PREFIX4 ,
.Nm NET_PREFIX6 ,
.Nm netaddr4 ,
.Nm netaddr6 ,
.Nm netcmp ,
.Nm netcmp4 ,
.Nm netcmp6 ,
.Nm netprefix ,
.Nm netto4 ,
.Nm netto6
.Nd coherent network address mapping
.Sh SYNOPSIS
.In peak.h
.Ft void
.Fn netaddr4 "struct netaddr *in4" "const uint32_t ip"
.Ft void
.Fn netaddr6 "struct netaddr *in6" "const void *ip"
.Ft int
.Fo netcmp
.Fa "const struct netaddr *x"
.Fa "const struct netaddr *y"
.Fc
.Ft int
.Fn netcmp4 "const struct netaddr *x"
.Ft int
.Fn netcmp6 "const struct netaddr *x"
.Ft int
.Fo netprefix
.Fa "const struct netaddr *x"
.Fa "const struct netaddr *y"
.Fa "unsigned int yp"
.Fc
.Fn NET_PREFIX4 PREFIX
.Fn NET_PREFIX6 PREFIX
.Ft void *
.Fn netto4 "const struct netaddr *x"
.Ft void *
.Fn netto6 "const struct netaddr *x"
.Sh DESCRIPTION
The
.Nm peak_net
functions provide support for coherent network address mapping
between IP version 4 and 6.
Regardless of its version, all of the created structures can be
compared without the caller worrying about the implications.
The internal mapping of IPv4 is implemented using the ::ffff:0:0/96
network as specified in Section 2.5.5.2 of RFC 4291.
.Pp
Both
.Fn netaddr4
and
.Fn netaddr6
convert the provided IPv4 or IPv6 network address into a given
.Vt struct netaddr .
.Pp
The function
.Fn netcmp
then allows the caller to compare such structures against each
other.
The function returns zero if the two addresses are identical.
If
.Va x
is less than
.Va y ,
the function returns <0.
Otherwise,
.Va x
is greater than
.Va y ,
which is indicated by a return value of >0.
.Pp
The functions
.Fn netcmp4
and
.Fn netcmp6
return zero if the address is an IPv4 or IPv6 address, respectively.
Otherwise non-zero is returned.
.Pp
The function
.Fn netprefix
compares both addresses
.Va x
and
.Va y
according to the given prefix length
.Va yp .
The address prefix is required to be translated to an internal
prefix representation using either
.Fn NET_PREFIX4
or
.Fn NET_PREFIX6 ,
respectively.
To match the full address,
.Dv NET_PREFIX_MAX
can be used instead.
When the addresses match in the prefix, the function returns zero.
Otherwise, a non-zero value is returned.
.Pp
The functions
.Fn netto4
and
.Fn netto6
return a pointer to the location of the respective address in network
order.
.Sh AUTHORS
.An Franco Fichtner Aq Mt franco@packetwerk.com
