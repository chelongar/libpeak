.\"
.\" Copyright (c) 2013 Franco Fichtner <franco@packetwerk.com>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd November 18, 2013
.Dt PEAK_STASH 3
.Os
.Sh NAME
.Nm STASH_DECLARE ,
.Nm STASH_CLEAR ,
.Nm STASH_COUNT ,
.Nm STASH_EMPTY ,
.Nm STASH_FOREACH ,
.Nm STASH_FOREACH_REVERSE ,
.Nm STASH_FULL ,
.Nm STASH_LIST ,
.Nm STASH_PUSH ,
.Nm STASH_POP ,
.Nm STASH_REBUILD
.Nd stack-based temporary storage
.Sh SYNOPSIS
.In peak.h
.Fn STASH_DECLARE NAME TYPE COUNT
.Fn STASH_CLEAR NAME
.Fn STASH_COUNT NAME
.Fn STASH_EMPTY NAME
.Fn STASH_FOREACH PTR NAME
.Fn STASH_FOREACH_REVERSE PTR NAME
.Fn STASH_FULL NAME
.Fn STASH_LIST NAME
.Ft TYPE *
.Fn STASH_PUSH PTR NAME
.Ft TYPE *
.Fn STASH_POP NAME
.Fn STASH_REBUILD NAME TYPE STASH_T
.Fn STASH_SORT NAME CMP
.Ft int
.Fn CMP "const void *x" "const void *x"
.Sh DESCRIPTION
The
.Nm peak_stash
macros provide a temporary LIFO storage for a number of elements of
the same type.
It may be in the reader's best interest to temporary store a number
of results of the same type, before they are each distributed to their
actual destination.
The macros are designed to work with singular types as well as
structures.
.Pp
The
.Fn STASH_DECLARE
macro creates a stash of the name
.Fa NAME ,
the type
.Fa TYPE ,
and with
.Fa COUNT
number of possible elements.
It is recommended to invoke the macro in the declaration part of
the topmost function or global context depending on the type of
stash that is required.
In case of the latter, proper access serialisation must be considered.
.Fn STASH_REBUILD
can rebuild the stash across function boundaries.
The type
.Vt stash_t
is used to pass
.Va STASH_T
to the macro.
.Pp
The
.Fn STASH_PUSH
macro stores the contents of pointer
.Fa PTR
of
.Fa TYPE *
on a previously declared stash of the name
.Fa NAME .
On the other hand, the
.Fn STASH_POP
macro reclaims the most recent element from the stash
.Fa NAME
and returns the pointer to the temporary location.
Both macros have sanity checks in place and will return
.Dv NULL
when an out of bounds exception would occur.
Otherwise, the pointer to the inserted element is returned.
.Pp
The macro
.Fn STASH_SORT
sorts the stash
.Fa NAME
using the compare function
.Fa CMP .
Internally,
.Xr qsort 3
is used to do the sorting.
.Pp
The
.Fn STASH_FOREACH
macro runs through all stored elements after one another.
The argument
.Fa PTR
represents a pointer of
.Fa TYPE * .
The
.Fn STASH_FOREACH_REVERSE
does the same thing, but in reverse order.
.Pp
The
.Fn STASH_COUNT
macro may come in handy as well returning the current count of elemens
stored; and the
.Fn STASH_CLEAR
macro resets the stash
.Fa NAME .
.Fn STASH_EMPTY
and
.Fn STASH_FULL
return true if the stash
.Fa NAME
is empty or full, respectively.
The macro
.Fn STASH_LIST
returns a pointer to the first element of the stash
.Fa NAME .
.Sh EXAMPLES
A sample implentation with an embedded structure in a global stash
may look as follows:
.Bd -literal -offset indent
struct interval {
	int left;
	int right;
};

static STASH_DECLARE(storage, struct interval, 10);

void
push(struct interval *i)
{
	STASH_PUSH(i, storage);
}

struct interval *
pop(void)
{
	return (STASH_POP(storage));
}
.Ed
.Sh AUTHORS
.An Franco Fichtner Aq Mt franco@packetwerk.com
