.\"
.\" Copyright (c) 2012-2014 Franco Fichtner <franco@packetwerk.com>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd June 18, 2014
.Dt PEAK_PREALLOC 3
.Os
.Sh NAME
.Nm prealloc_empty ,
.Nm prealloc_exit ,
.Nm prealloc_get ,
.Nm prealloc_gets ,
.Nm prealloc_init ,
.Nm prealloc_put ,
.Nm prealloc_puts ,
.Nm prealloc_size ,
.Nm prealloc_used ,
.Nm prealloc_valid
.Nd memory pool management
.Sh SYNOPSIS
.In peak.h
.Ft int
.Fn prealloc_empty HEAD
.Ft void
.Fn prealloc_exit "prealloc_t *self"
.Ft unsigned int
.Fn prealloc_init "prealloc_t *self" "size_t count" "size_t size"
.Ft void *
.Fn prealloc_get "prealloc_t *self"
.Ft void *
.Fn prealloc_gets "prealloc_t *self"
.Ft void
.Fn prealloc_put "prealloc_t *self" "void *p"
.Ft void
.Fn prealloc_puts "prealloc_t *self" "void *p"
.Ft size_t
.Fn prealloc_size HEAD
.Ft size_t
.Fn prealloc_used HEAD
.Ft int
.Fn prealloc_valid HEAD P
.Sh DESCRIPTION
The
.Nm peak_prealloc
API provides a minimal implementation for preallocated memory pools.
It is designed to be as fast as possible.
Thus the implementation can only yield memory from a fixed pool size.
The functions come in a few different flavours mainly for performance
reasons.
Please be advised that there is no functionality to mitigate empty pool
scenarios.
While a resize functionality is feasible, there is no use-case at the
moment.
.Pp
The function pair
.Fn prealloc_init
and
.Fn prealloc_exit
initialise and destroy memory pool structure.
Upon success,
.Fn prealloc_init
returns non-zero.
Otherwise, zero is returned.
A process-wide panic message followed by an
.Xr abort 3
is issued by
.Fn prealloc_exit
in case of lost elements.
.Pp
The function pair
.Fn prealloc_gets
and
.Fn prealloc_puts
offer the caller a thread-safe way to claim and release a pool's
memory chunk.
The safety comes from a spinlock provided by the
.Xr peak_sys 3
API.
On the other hand,
.Fn prealloc_get
and
.Fn prealloc_put
operate in lockless mode, in case the calling code is singlethreaded
or has a higher locking mechanism already in place.
Upon success, both
.Fn prealloc_gets
and
.Fn prealloc_get
return a pointer to the freshly claimed memory chunk.
Otherwise,
.Dv NULL
is returned to indicate the memory pool is empty.
.Pp
A family of support macros are also available.
.Fn prealloc_valid
checks if a supplied chunk
.Va P
belongs to the memory pool
.Va SELF .
The macro
.Fn prealloc_empty
will indicate whether the memory pool
.Va SELF
is depleted or not.
Last but not least,
.Fn prealloc_size
returns the chunk size of the memory pool
.Va SELF ,
and
.Fn prealloc_used
returns the number of currently claimed chunks thereof.
.Sh SEE ALSO
.Xr peak_sys 3
.Sh AUTHORS
.An Franco Fichtner Aq Mt franco@packetwerk.com
