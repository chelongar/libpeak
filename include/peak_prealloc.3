.Dd November 27, 2012
.Dt PEAK_PREALLOC 3
.Os
.Sh NAME
.Nm prealloc_init ,
.Nm prealloc_exit ,
.Nm prealloc_initd ,
.Nm prealloc_exitd ,
.Nm prealloc_get ,
.Nm prealloc_put ,
.Nm prealloc_gets ,
.Nm prealloc_puts ,
.Nm prealloc_valid ,
.Nm prealloc_empty ,
.Nm prealloc_used ,
.Nm prealloc_size
.Nd preallocated memory pool management
.Sh SYNOPSIS
.Fd #include <peak.h>
.Ft unsigned int
.Fo prealloc_init
.Fa "prealloc_t *self"
.Fa "size_t count" "size_t size"
.Fc
.Ft void
.Fn prealloc_exit "prealloc_t *self"
.Ft prealloc_t *
.Fn prealloc_initd "size_t count" "size_t size"
.Ft void
.Fn prealloc_exitd "prealloc_t *self"
.Ft void *
.Fn prealloc_get "prealloc_t *self"
.Ft void
.Fn prealloc_put "prealloc_t *self" "void *p"
.Ft void *
.Fn prealloc_gets "prealloc_t *self"
.Ft void
.Fn prealloc_puts "prealloc_t *self" "void *p"
.Ft int
.Fn prealloc_valid HEAD P
.Ft int
.Fn prealloc_empty HEAD
.Ft size_t
.Fn prealloc_used HEAD
.Ft size_t
.Fn prealloc_size HEAD
.Sh DESCRIPTION
The
.Nm peak_prealloc
API provides a minimal implementation for preallocated memory pools.
It is designed to be as fast as possible.
Thus, the implementation can only yield memory from a fixed pool size.
The functions come in a few different flavors mainly for performance
reasons.
Please be advised that there is no functionality to mitigate empty pool
scenarios.
While a resize functionality is feasible, there is no use-case at the
moment.
.Pp
The function pair
.Fn prealloc_initd
and
.Fn prealloc_exitd
create and destroy a dynamically allocated pool struct, while
.Fn prealloc_init
and
.Fn prealloc_exit
work on an externally provided
.Vt prealloc_t .
However, the actual memory pool is always allocated dynamically.
Either memory pool can be operated by all following functions.
.Pp
The function pair
.Fn prealloc_gets
and
.Fn prealloc_puts
offer the caller a thread-safe way to claim and release a pool's
memory chunk.
The safety comes from a spinlock provided by the
.Xr peak_sys 3
API.
On the other hand,
.Fn prealloc_get
and
.Fn prealloc_put
operate in lockless mode, in case the calling code is singlethreaded
or has a higher locking mechanism already in place.
.Pp
A family of support macros are also available.
.Fn prealloc_valid
checks if a supplied chunk
.Va P
belongs to the memory pool
.Va SELF .
The macro
.Fn prealloc_empty
will indicate whether the memory pool
.Va SELF
is depleted or not.
Last but not least,
.Fn prealloc_size
returns the chunk size of the memory pool
.Va SELF ,
and
.Fn prealloc_used
returns the number of currently claimed chunks thereof.
.Pp
Some API calls provide inline consistency checks for buffer underflows,
pool/chunk mismatch, double-free, as well as for prematurely exited
memory pools.
If a check fails, both a process-wide panic message describing the
error and an
.Xr abort 3
are issued.
There is no way to disable this at the moment, but the performance
loss is minimal.
.Sh RETURN VALUES
Upon success,
.Fn prealloc_initd
returns a pointer to the initialized memory pool.
Otherwise,
.Dv NULL
is returned.
.Fn prealloc_init
returns non-zero if the given memory pool could be initalized.
Otherwise, zero is returned.
.Pp
Similarily, upon success, both
.Fn prealloc_gets
and
.Fn prealloc_get
return a pointer to the freshly claimed memory chunk.
Otherwise,
.Dv NULL
is returned to indicate the memory pool is empty.
.Sh SEE ALSO
.Xr peak_sys 3
.Sh AUTHORS
.An "Franco Fichtner" Aq franco@lastsummer.de
