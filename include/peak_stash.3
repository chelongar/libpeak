.Dd March 12, 2013
.Dt PEAK_STASH 3
.Os
.Sh NAME
.Nm STASH_DECLARE ,
.Nm STASH_CLEAR ,
.Nm STASH_COUNT ,
.Nm STASH_EMPTY ,
.Nm STASH_FULL ,
.Nm STASH_PUSH ,
.Nm STASH_POP ,
.Nm STASH_FOREACH ,
.Nm STASH_FOREACH_REVERSE
.Nd stack-based temporary storage
.Sh SYNOPSIS
.In peak.h
.Fn STASH_DECLARE NAME TYPE COUNT
.Fn STASH_CLEAR NAME
.Fn STASH_COUNT NAME
.Fn STASH_EMPTY NAME
.Fn STASH_FULL NAME
.Fn STASH_PUSH PTR NAME
.Ft TYPE *
.Fn STASH_POP NAME
.Fn STASH_FOREACH PTR NAME
.Fn STASH_FOREACH_REVERSE PTR NAME
.Sh DESCRIPTION
The
.Nm peak_stash
macros provide a temporary LIFO storage for a number of elements of
the same type.
It may be in the reader's best interest to temporary store a number
of results of the same type, before they are each distributed to their
actual destination.
The macros are designed to work with singular types as well as
structures.
.Pp
The
.Fn STASH_DECLARE
macro creates a stash of the name
.Fa NAME ,
the type
.Fa TYPE ,
and with
.Fa COUNT
number of possible elements.
It is recommended to invoke the macro in the declaration part of
the topmost function or global context depending on the type of
stash that is required.
In case of the latter, proper access serialisation must be considered.
.Pp
The
.Fn STASH_PUSH
macro stores the contents of pointer
.Fa PTR
of
.Fa TYPE *
on a previously declared stash of the name
.Fa NAME .
On the other hand, the
.Fn STASH_POP
macro reclaims the most recent element from the stash
.Fa NAME
and returns the pointer to the temporary location.
Both macros have sanity checks in place and will panic when an
out of bounds exception would occur.
.Pp
The
.Fn STASH_FOREACH
macro runs through all stored elements after one another without
triggering a panic. The argument
.Fa PTR
represents a pointer of
.Fa TYPE * .
The
.Fn STASH_FOREACH_REVERSE
does the same thing, but in reverse order.
.Pp
If you feel terrible about panics, an alernative is checking the
current status of stash
.Fa NAME
via the
.Fn STASH_EMPTY
and
.Fn STASH_FULL
helper macros before attempting a
.Fn STASH_POP
or
.Fn STASH_PUSH ,
respectively.
The
.Fn STASH_COUNT
macro may come in handy as well returning the current count of elemens
stored; and the
.Fn STASH_CLEAR
macro resets the stash.
.Sh EXAMPLES
A sample implentation with an embedded structure in a global stash
may look as follows:
.Pp
.Bd -literal -offset indent
struct interval {
	int left;
	int right;
};

static STASH_DECLARE(storage, struct interval, 10);

void
push(struct interval *i)
{
	STASH_PUSH(storage, i);
}

struct interval *
pop(void)
{
	return STASH_POP(storage);
}
.Ed
.Sh AUTHORS
.An "Franco Fichtner" Aq franco@lastsummer.de
