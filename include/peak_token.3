.\"
.\" Copyright (c) 2014 Franco Fichtner <franco@packetwerk.com>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd December 6, 2014
.Dt PEAK_TOKEN 3
.Os
.Sh NAME
.Nm peak_token_credit ,
.Nm _peak_token_credit ,
.Nm peak_token_dec ,
.Nm peak_token_exit ,
.Nm peak_token_inc ,
.Nm peak_token_init ,
.Nm _peak_token_init
.Nd token slot machine
.Sh SYNOPSIS
.In peak.h
.Ft unsigned int
.Fo peak_token_credit
.Fa "struct peak_token *self"
.Fa "const int64_t want"
.Fa "const int64_t ts_ms"
.Fc
.Ft unsigned int
.Fo _peak_token_credit
.Fa "struct peak_token *self"
.Fa "const int64_t want"
.Fa "const int64_t ts_ms"
.Fc
.Ft unsigned int
.Fn peak_token_dec "struct peak_token *self"
.Ft void
.Fn peak_token_exit "struct peak_token *self"
.Ft unsigned int
.Fn peak_token_inc "struct peak_token *self"
.Ft void
.Fn peak_token_init "struct peak_token *self" "const int64_t max"
.Sh DESCRIPTION
The
.Nm peak_token
API provides simple means to operate shared and private token
bucktes bound to millisecond resolution.
.Pp
The functions
.Fn peak_token_init
and
.Fn peak_token_exit
initialise or destroy a token bucket, respectively.
.Va max
may be any unit-per-second value of the caller's choosing.
The memory of
.Vt struct peak_token
must be provided externally.
Similarly, the function
.Fn _peak_token_init
can be used to implement non-spinlock variants or to reset
a token to a different value.
.Pp
Aditionally,
.Fn peak_token_inc
and
.Fn peak_token_dec
may used to implement reference counting for dynamic management
by the caller, as they increment or decrement the reference counter,
respectively.
Both return the updated reference count.
.Pp
The
.Fn peak_token_credit
function updates the bucket's balance according to how much time
passed in milliseconds through the absolute timestamp
.Va ts_ms .
If no time has passed or time ran backwards, the balance is left
as is.
Afterwards,
.Va want
is substracted from the bucket's balance if sufficient credits are
available and the function returns non-zero.
If the bucket was initialised with zero bytes it will always
return non-zero.
Otherwise, zero is returned.
Negative amounts of
.Va want
will be reimbursed and must have been aqcuired at the same time
in order to make sense to the implementation.
Similarly, the function
.Fn _peak_token_credit
operates like its sibling, but does not use the internal
mutex to serialise access.
.Sh AUTHORS
.An Franco Fichtner Aq Mt franco@packetwerk.com
