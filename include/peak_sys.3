.\"
.\" Copyright (c) 2012 Franco Fichtner <franco@packetwerk.com>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd June 27, 2013
.Dt PEAK_SYS 3
.Os
.Sh NAME
.Nm spin_init ,
.Nm spin_exit ,
.Nm spin_lock ,
.Nm spin_unlock ,
.Nm barrier_init ,
.Nm barrier_exit ,
.Nm barrier_wait ,
.Nm barrier_wake ,
.Nm barrier_join ,
.Nm barrier_leave
.Nd synchonisation wrappers
.Sh SYNOPSIS
.In peak.h
.Ft void
.Fn spin_init "spinlock_t *lock"
.Ft void
.Fn spin_exit "spinlock_t *lock"
.Ft void
.Fn spin_lock "spinlock_t *lock"
.Ft void
.Fn spin_unlock "spinlock_t *lock"
.Ft void
.Fn barrier_init "barrier_t *barrier"
.Ft void
.Fn barrier_exit "barrier_t *barrier"
.Ft int
.Fn barrier_wait "barrier_t *barrier"
.Ft void
.Fn barrier_wake "barrier_t *barrier"
.Ft int
.Fn barrier_join "barrier_t *barrier"
.Ft int
.Fn barrier_leave "barrier_t *barrier"
.Sh DESCRIPTION
The
.Nm peak_sys
API provides POSIX thread-like functionality for all target operating
systems.
In particular, it implements spinlocks and extended barriers.
Please be aware that both types can produce deadlock scenarios if you
don't adhere to the given instructions.
.Sh SPINLOCKS
The spinlocks are of type
.Vt spinlock_t ,
which must be provided by the caller.
Invoking
.Fn spinlock_init
yields a usable lock, which can be operated by subsequent calls of
.Fn spin_lock
and
.Fn spin_unlock .
The lock can be destroyed by calling
.Fn spin_exit .
Operating an uninitialised or previously destroyed spinlock yields
an undefined behaviour.
.Sh BARRIERS
The implementation of barriers of type
.Vt barrier_t
is a bit more complex than its POSIX equivalent.
Creation via
.Fn barrier_init
will initialise the barrier, but the number of threads waiting on
a barrier is dynamic.
Thus, after creation, zero threads are registered by the barrier.
Waiting on such a barrier is undefined.
.Pp
Instead, the functions
.Fn barrier_join
and
.Fn barrier_leave
must be used to register or unregister a thread to the barrier.
In some cases, the operation may not succeed, which is indicated by
the return value of both functions.
A zero return value indicates the operation could be finished,
otherwise a non-zero value is returned.
So in both cases, these functions need to be polled in order to
invoke the requested operation:
.Bd -literal -offset indent
while (barrier_join(&barrier)) {
	msleep(1);
}
.Ed
.Pp
In case of leaving a barrier, care must be taken to invoke the
internal barrier synchronisation mechanism as long as the thread
cannot leave the barrier:
.Bd -literal -offset indent
while (barrier_leave(&barrier)) {
	wait_and_wake_if_needed(&barrier);
}
.Ed
.Pp
The acutal barrier synchronisation mechanism is implemented using
.Fn barrier_wait
and
.Fn barrier_wake .
This provides another API twist: the serialising thread is in charge of
calling the wake function to wake up all other threads.
To indicate this behaviour,
.Fn barrier_wait
returns non-zero.
Otherwise, zero is returned, meaning the serialisation was complete
and all threads have been woken up.
The code may look like so:
.Bd -literal -offset indent
if (needed) {
	/* all threads invoke barrier wait */
	if (barrier_wait(&barrier)) {
		/* winner gets to do all the work */
		barrier_wake(&barrier);
	}
	/* all threads are awake again */
}
.Ed
.Pp
This ensures the serialising thread can do data structure manipulations
while no other thread is able to change or even reference it, because
all those threads are being blocked by the barrier.
Traditionally, this had to be implemented by invoking a second barrier
wait operation.
This was considered an unnecessary complication.
.Pp
Finally, the barrier can be destroyed by calling
.Fn barrier_exit .
Operating an uninitialised or previously destroyed barrier
results in undefined behaviour.
.Sh AUTHORS
.An "Franco Fichtner" Aq franco@packetwerk.com
