.\"
.\" Copyright (c) 2013-2014 Franco Fichtner <franco@packetwerk.com>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd April 26, 2014
.Dt PEAK_NETMAP 3
.Os
.Sh NAME
.Nm peak_netmap_attach ,
.Nm peak_netmap_claim ,
.Nm peak_netmap_detach ,
.Nm peak_netmap_divert ,
.Nm peak_netmap_drop ,
.Nm peak_netmap_forward ,
.Nm peak_netmap_lock ,
.Nm peak_netmap_unlock
.Nd the convenient netmap wrapper
.Sh SYNOPSIS
.In peak.h
.Ft unsigned int
.Fn peak_netmap_attach "const char *ifname"
.Ft struct peak_netmap *
.Fn peak_netmap_claim "int timeout" "const unsigned int want_sw"
.Ft unsigned int
.Fn peak_netmap_detach "const char *ifname"
.Ft unsigned int
.Fn peak_netmap_drop "struct peak_netmap *packet"
.Ft unsigned int
.Fn peak_netmap_forward "struct peak_netmap *packet"
.Ft unsigned int
.Fn peak_netmap_divert "struct peak_netmap *packet" "const char *ifname"
.Ft void
.Fn peak_netmap_lock void
.Ft void
.Fn peak_netmap_unlock void
.Sh DESCRIPTION
.Xr netmap 4
is a framework that gives userspace applications a very fast
channel to exchange raw packets with supported network adapters on
.Fx .
The
.Nm peak_netmap
API provides a simple wrapper around it, so that higher layers do not have
to fiddle with its magic at all.
.Pp
The dynamic interface management is handled via the
.Fn peak_netmap_attach
and
.Fn peak_netmap_detach
function pair.
The
.Va ifname
parameter must be a string holding the interface name.
Both functions return zero, if the operation was successful.
Otherwise, a non-zero value is returned.
.Pp
The
.Fn peak_netmap_lock
and
.Fn peak_netmap_unlock
functions pairs can be used to guard the API against premature
interface attach and detach.
It's recommended to provide glitch-free operation of claim and
friends \(em especially when separate threads handle interface
configuration and receive/transmit.
.Pp
The
.Fn peak_netmap_claim
function claims ownership of a packet internally bound to
.Xr netmap 4 .
If
.Va timeout
is greater than zero, it specifies a maximum interval
(in milliseconds) to wait for incoming packets.
If
.Va timeout
is zero, then
.Fn peak_netmap_claim
will return without blocking.
If the value of
.Va timeout
is \-1, the call blocks indefinitely.
Setting
.Va want_sw
to non-zero is used to also check the software receive ring.
The returned packet remains in the mapped kernel slot,
but can be modified safely in userland.
The function returns
.Dv NULL
on errors or an expired timeout.
Otherwise, a pointer to the claimed packet reference is returned.
.Pp
In theory, claiming multiple packets at once is possible
as long as all the internal pools have the capacity.
However, it is wise not to stress this part of the implementation.
Externally,
.Vt struct peak_netmap
is used to provide the caller with all the information regarding
the claimed packet.
The structure is defined as follows:
.Bd -literal -offset indent
struct peak_netmap {
	struct peak_timeval ts;
	const char *ifname;
	unsigned int len;
	unsigned int ll;
	void *buf;
};
.Ed
.Pp
The
.Fn peak_netmap_forward
function releases the previously claimed
.Va packet
and moves it over to the host stack or the interface,
whichever was the original destination of the packet.
This operation cannot fail.
Note that this operation can cause performance degradation
as the packet needs to be converted either from or to an
.Xr mbuf 9 .
.Pp
The
.Fn peak_netmap_drop
function releases the previously claimed
.Va packet
and issues it to be dropped.
This operation cannot fail.
.Pp
The
.Fn peak_netmap_divert
function releases the previously claimed
.Va packet
and moves it to the specified interface
.Va ifname
using a zero-copy technique.
Upon success, the function returns zero.
Otherwise, non-zero is returned indicating that the packet could not
be transmitted via the specified interface.
The user must call the function again later or drop the packet.
.Sh SEE ALSO
.Xr fuse 1 ,
.Xr netmap 4
.Sh AUTHORS
.An Franco Fichtner Aq Mt franco@packetwerk.com
.Sh CAVEATS
The current version of
.Nm peak_netmap
is only capable of single-threaded claim and divert operations.
