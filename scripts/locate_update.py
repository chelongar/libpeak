#!/usr/bin/env python2.7

# Copyright (c) 2014 Franco Fichtner <franco@packetwerk.com>
# Copyright (c) 2014 Tobias Boertitz <tobias@packetwerk.com>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

countries = []

with open('contrib/tzdata/iso3166.tab', 'r') as lines:
	for line in lines:
		country = line.strip().split('\t')
		if country[0][0] == "#" or len(country) != 2:
			# ignore garbage
			continue
		# be paranoid about upper case
		country[0] = country[0].upper()
		countries.append(country)

if len(countries) == 0:
	exit(0)

# special case: not in the database when database isn't empty
countries.append(["XX", "undefined"])

countries.sort(key=lambda country: country[0])

def insertIntoFile(fileName, beginString, endString, insertString):
	file_content = 0
	insert_begin = -1
	line_idx = -1
	del_list = list()

	# read destination file and prepare for writing
	with open(fileName, 'r') as dest_file:
		insert_section = False

		file_content = dest_file.readlines()

		# remove not needed / outdated lines and find insertion point
		for line in file_content:
			line_idx += 1

			if line == beginString:
				insert_section = True
				insert_begin = line_idx
				continue
			elif line == endString:
				insert_section = False
				break

			# collect obsolete line
			# insert in front, so we delete form bottom up later on
			if insert_section == True:
				del_list.insert(0, line_idx)

		# delete obsolete lines
		for line_idx in del_list:
			del file_content[line_idx]

	line_idx = -1

	# insert definitions
	with open(fileName, 'w') as dest_file:
		for line in file_content:
			line_idx += 1

			# write normal file data
			dest_file.write(line)

			# insert given string when insertion point is reached
			if line_idx == insert_begin:
				dest_file.write(insertString)

# prepare string for insertion into header file
header_string = "\n"
header_string += "/*\n"
header_string += " * Begin of autogenerated section.  DO NOT EDIT.\n"
header_string += " */\n"
header_string += "\n"
header_string += "struct locate_item {\n"
header_string += "\tunsigned int guid;\n"
header_string += "\tconst char *name;\n"
header_string += "\tconst char *desc;\n"
header_string += "};\n\n"
header_string += "enum {\n"
header_string += "\tLOCATE_UNKNOWN = 0U,\n"
for country in countries:
	header_string += "\tLOCATE_" + country[0] + ",\n"
header_string += "\tLOCATE_MAX\t/* last element */\n"
header_string += "};\n"
header_string += "\n"
header_string += "/*\n"
header_string += " * End of autogenerated section. YOU MAY CONTINUE.\n"
header_string += " */\n\n"

# prepare string for insertion into source file
source_string = "\n"
source_string += "/*\n"
source_string += " * Begin of autogenerated section.  DO NOT EDIT.\n"
source_string += " */\n"
source_string += "\n"
source_string += "static const struct locate_item locate_items[] = {\n"
source_string += "\t{ LOCATE_UNKNOWN, \"\", \"unknown\" },\t/* `unknown' placeholder */\n"
for country in countries:
	source_string += "\t{ LOCATE_" + country[0] + ", \"" + \
	    country[0] + "\", \"" + country[1] + "\" },\n"
source_string += "};\n\n"
source_string += "/*\n"
source_string += " * End of autogenerated section. YOU MAY CONTINUE.\n"
source_string += " */\n\n"

# insert relevant data into the target files
insertIntoFile('lib/peak_locate.h', "#define PEAK_LOCATE_H\n", \
	"#define LOCATE_MAGIC\t0x10CA7E10CA7E7412ull\n", header_string)
insertIntoFile('lib/peak_locate.c', "#define LOCATE_DEFAULT\t\"/usr/local/var/peak/locate.bin\"\n", \
	"struct peak_locates {\n", source_string)
